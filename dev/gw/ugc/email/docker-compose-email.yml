services:
  rabbitmq-manager:
    image: rabbitmq:3.10-management
    container_name: rabbitmq
    hostname: rabbitmq
    restart: always
    ports:
      - 15672:15672
      - 5672:5672
    healthcheck:
      test: rabbitmq-diagnostics -q status && rabbitmq-diagnostics -q check_local_alarms || exit 1
      interval: 10s
      timeout: 8s
      retries: 10

  rabbit-create-queue:
    container_name: rabbit-create-queue
    depends_on:
      rabbitmq-manager:
        condition: service_healthy
    image: rabbitmq:3.10-management
    entrypoint: rabbitmqadmin --host=rabbitmq declare queue --vhost=/ name=email.notification

  celery-redis:
    hostname: celery-redis
    container_name: celery-redis
    env_file:
      - .env
    environment:
      REDIS_HOST: $CELERY_REDIS_HOST
      REDIS_PORT: $CELERY_REDIS_PORT
      REDIS_PASSWORD: $CELERY_REDIS_PASSWORD
    image: bitnami/redis:latest
    depends_on:
      rabbitmq-manager:
        condition: service_healthy
      rabbit-create-queue:
        condition: service_completed_successfully
    healthcheck:
      test: redis-cli -a $CELERY_REDIS_PASSWORD ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    ports:
      - 6379:6379

  celery-worker:
    env_file:
      - .env
    build:
      context: .
      dockerfile: worker.Dockerfile
    image: celery-worker
    hostname: celery-worker
    container_name: celery-worker
    healthcheck:
      test: celery -b amqp://$RMQ_USER:$RMQ_PASSWORD@$RMQ_HOST:5672 inspect ping -d celery@celery-worker || exit 1
      interval: 10s
      timeout: 9s
      retries: 5
      start_period: 5s
    depends_on:
      rabbitmq-manager:
        condition: service_healthy
      celery-redis:
        condition: service_healthy
      rabbit-create-queue:
        condition: service_completed_successfully

  message2celery:
    env_file:
      - .env
    build:
      context: .
      dockerfile: message2celery.Dockerfile
    image: message2celery
    hostname: message2celery
    container_name: message2celery
    depends_on:
      celery-worker:
        condition: service_healthy
      mongo:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully

  mongo:
    container_name: mongo-ugc
    hostname: mongo
    image: mongo
    ports:
      - 27017:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    command: mongod --quiet --replSet mongors
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  mongo-init:
    container_name: mongo-init
    image: mongo
    volumes:
      - ../mongo/init/init_script.js:/mongo-init.js
    entrypoint: mongosh --quiet --host mongo /mongo-init.js
    depends_on:
      mongo:
        condition: service_healthy
